pipeline {
    agent any

    environment {
        // Add /usr/local/bin to the PATH so Jenkins can access Docker
        PATH = "/usr/local/bin:$PATH"
        // Environment variables for Docker Hub, DB, and project details
        DOCKERHUB_REPO = 'ilangimel/bleachdle-web-app' 
        DOCKERHUB_USERNAME = credentials('DOCKERHUB_USERNAME') // Secret for Docker Hub username
        DOCKERHUB_PASSWORD = credentials('DOCKERHUB_PASSWORD') // Secret for Docker Hub password

        // Environment variables for DB
        DB_HOST = credentials('DB_HOST')
        DB_USER = credentials('DB_USER')
        DB_PASSWORD = credentials('DB_PASSWORD')
        DB_NAME = credentials('DB_NAME')
        PORT = '5000' // Port used by your application
        IMAGE_NAME = 'ilangimel/bleachdle-web-app' // Update with your image name
        VERSION = "${BUILD_NUMBER}" // Build versioning using Jenkins build number

        // Environment Variables API URL
        API_URL = credentials('API_URL')

        // EC2 Instance variables
        EC2_HOST = "ec2-13-61-184-63.eu-north-1.compute.amazonaws.com"  // EC2 host (public IP or DNS)
    }

    stages {
        // Stage 1: Clean Workspace
        stage('Clean Workspace') {
            steps {
                cleanWs()  // Cleans up the workspace to ensure a fresh build environment
            }
        }

        // Stage 2: Clone Repository
        stage('Clone Repository') {
            steps {
                script {
                    checkout([$class: 'GitSCM', 
                        branches: [[name: '*/main']],  // Checkout the main branch
                        userRemoteConfigs: [[
                            url: 'https://github.com/Ilan-Gimel/BleachdleWeb-git.git', // Replace with your repo URL
                            credentialsId: 'Github-cred'  // Make sure GitHub credentials are set in Jenkins
                        ]]
                    ])
                }
            }
        }

        // Stage 3: Login to Docker Hub
        stage('Login to Docker Hub') {
            steps {
                script {
                    // Fetch the secret text credentials for username and password
                    withCredentials([string(credentialsId: 'DOCKERHUB_USERNAME', variable: 'DOCKER_USERNAME'),
                                    string(credentialsId: 'DOCKERHUB_PASSWORD', variable: 'DOCKER_PASSWORD')]) {
                        // Use the credentials directly in docker login (using full path to docker)
                        sh '''
                            echo "Logging into Docker Hub"
                            echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
                        '''
                    }
                }
            }
        }

        // Stage 4: Build and Push Docker Image
        stage('Build and Push Docker Image') {
            steps {
                script {
                    dir("${WORKSPACE}/BleachdleWeb") { // Ensure this is the correct directory

                        // Create a new buildx builder (with multi-platform support)
                        sh '''
                            echo "Setting up Docker Buildx builder named Bleachbuild"
                            docker buildx create --use --name Bleachbuild
                        '''

                        // Enable experimental features and build using docker-compose with multi-platform support
                        sh '''
                            echo "Building the Docker image using Buildx with docker-compose.yml"
                            docker buildx build --platform linux/amd64,linux/arm64  -t $IMAGE_NAME:latest -t $IMAGE_NAME:1.0.${VERSION} . --push

                        '''
                    }
                }
            }
        }


        // Stage 5: Prepare .env File
        stage('Prepare .env File') {
            steps {
                script {
                    // Use shell script to create the .env file
                    sh """
                        echo "DB_HOST=${DB_HOST}" > ${WORKSPACE}/BleachdleWeb/.env
                        echo "DB_USER=${DB_USER}" >> ${WORKSPACE}/BleachdleWeb/.env
                        echo "DB_PASSWORD=${DB_PASSWORD}" >> ${WORKSPACE}/BleachdleWeb/.env
                        echo "DB_NAME=${DB_NAME}" >> ${WORKSPACE}/BleachdleWeb/.env
                        echo "API_URL=${API_URL}" >> ${WORKSPACE}/BleachdleWeb/.env
                        echo ".env file created"
                    """
                }
            }
        }


        // Stage 6: Deploy to EC2
        stage('Deploy to EC2') {
            steps {
                script {
                    // Use sshUserPrivateKey to automatically extract username and private key
                    withCredentials([sshUserPrivateKey(credentialsId: 'EC2_SSH', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {

                        // Check for the file existence and copy it if not found
                        echo 'Copying docker-compose.yml . Copying from Jenkins workspace...'
                        sh """
                            scp -i \$SSH_KEY -o StrictHostKeyChecking=no ${WORKSPACE}/BleachdleWeb/docker-compose.yml \$SSH_USER@\$EC2_HOST:/home/\$SSH_USER/Bleachdle/
                            exit
                        """

                        // Copy .env file to EC2
                        echo 'Copying .env file to EC2'
                        sh """
                            scp -i \$SSH_KEY -o StrictHostKeyChecking=no "${WORKSPACE}/BleachdleWeb/.env" \$SSH_USER@\$EC2_HOST:/home/\$SSH_USER/Bleachdle/
                            exit
                        """

                        // Now run the Docker Compose commands
                        sh """
                            echo 'Connecting to EC2 and running Docker Compose commands'
                            ssh -i \$SSH_KEY -o StrictHostKeyChecking=no \$SSH_USER@\$EC2_HOST <<EOF
                                cd /home/\$SSH_USER/Bleachdle && \
                                echo 'Bringing down existing containers' && \
                                sudo docker-compose down && \
                                sudo docker-compose pull && \
                                echo 'Starting Docker Compose' && \
                                sudo docker-compose --env-file .env up -d
                                exit
                            EOF
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                // This block runs after the pipeline, even if it fails
                echo "Cleaning up resources and finishing pipeline execution."

                 // Clean up the .env file to avoid persisting it
                sh """
                    if [ -f ${WORKSPACE}/BleachdleWeb/.env ]; then
                        echo "Deleting .env file"
                        rm ${WORKSPACE}/BleachdleWeb/.env
                    fi
                """
                // Clean up the Buildx builder after the build is complete
                sh '''
                    echo "Cleaning up the Docker Buildx builder"
                    docker buildx rm Bleachbuild
                '''
            }
        }
    }
}
